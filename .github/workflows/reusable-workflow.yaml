name: Reusable work flow

on:
  workflow_call:
    inputs:
      directory_path:
        required: true
        type: string
      environment:
        required: true
        type: string

concurrency: 
  group: ${{ inputs.environment }}-${{ github.head_ref }}
permissions:
  contents: 'read'
  id-token: 'write'
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      INIT: init
      PROJECT_ID: "eurus-project-dev" #${{ github.event.inputs.project_id }}
      PROJECT_NUMBER: "103365112501"
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
  
    - id: 'auth'
      name: Google Auth
      uses: google-github-actions/auth@v0.4.0
      with:
        workload_identity_provider: 'projects/${{env.PROJECT_NUMBER}}/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
        service_account: '${{env.PROJECT_NUMBER}}-compute@developer.gserviceaccount.com'
        project_id: ${{env.PROJECT_ID}}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ inputs.directory_path }}
      run: |
        pwd
        gcloud version
        terraform init

    - name: Terraform Format
      working-directory: ${{ inputs.directory_path }}
      run: |
        pwd
        terraform fmt -check

    - name: Terraform Plan
      working-directory: ${{ inputs.directory_path }}
      run: |
        pwd
        terraform plan -lock=false

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ${{ inputs.directory_path }}
      if: github.ref == 'refs/heads/main' # && github.event_name == 'push'
      run: |
        pwd
        terraform apply -auto-approve -lock=false
