name: 'Terraform CI'

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: 'Name of the customer'
        required: true
  # push:
  #   branches:
  #   - main
  # pull_request:

jobs:
  do-it:
    runs-on: ubuntu-latest
    concurrency: 
      group: ${{ github.event.inputs.customer_name }}-${{ github.head_ref }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        name: code Checkout
        with:
          ref: main
#           persist-credentials: false
#           token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1

      - name: GITHUB_ENV & EXPORT
        run: |
          echo "CUSTOMER_NAME=${{ github.event.inputs.customer_name  }}" >> $GITHUB_ENV
          export CUSTOMER_NAME_EXPORT="${{ github.event.inputs.customer_name  }}"
          echo "GITHUB_ENV ${CUSTOMER_NAME}"
          echo "export ${CUSTOMER_NAME_EXPORT}"
        
      - name: ECHO GITHUB_ENV & EXPORT
        run: |
          echo "GITHUB_ENV ${CUSTOMER_NAME}"
          echo "export ${CUSTOMER_NAME_EXPORT}"
          
      - name: Set Matrix
        id: set-matrix
        run: |
          matrixStringifiedObject="{\"include\":[{\"env\":\"lower\"},{\"env\":\"upper\"}]}"
          echo "::set-output name=matrix::$matrixStringifiedObject"

#       - name: copy file and trigger pipeline
#         run: |-
#           cp -R -f ./workspace-consul-integration/customer_input/* ./workspace-consul-integration/cleanup_requests/

#       - name: Commit files
#         run: |
#           git config --local user.email "action@github.com"
#           git config --local user.name "GitHub Action"
#           git pull origin main
#           git add .
#           git commit -m "Add changes" -a || echo "No changes to commit"

#       - name: Push changes
#         uses: ad-m/github-push-action@master
#         with:
#           github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#           branch: main

  Plan:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.customer_name  == 'dev' }}
    needs: [do-it]
    strategy:
      matrix: ${{ fromJson(needs.do-it.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        name: code Checkout
        with:
          ref: main
      - name: ECHO
        run: |
          echo "Hello ${CUSTOMER_NAME}" 
    
    
  Dev:
    if: ${{ github.event.inputs.customer_name  == 'dev' }}
    needs: [Plan]
    uses: Zia-Eurus/terraform-gcp-github-actions/.github/workflows/reusable-workflow.yaml@main
    with:
      directory_path: ./infra
      environment: 'dev'
  
  Prod:
    needs: [Plan]
    if: github.event.inputs.customer_name  == 'prod' || github.event.inputs.customer_name  == 'dev'
    uses: Zia-Eurus/terraform-gcp-github-actions/.github/workflows/reusable-workflow.yaml@main
    with:
      directory_path: ./infra
      environment: 'prod'
      
    # env:
    #     GLOBAL_ENV: "global"
    # # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # defaults:
    #   run:
    #     shell: bash

    # steps:
    # # Checkout the repository to the GitHub Actions runner
    # - name: Checkout
    #   uses: actions/checkout@v2

    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
  
    # - id: 'auth'
    #   name: Google Auth
    #   uses: google-github-actions/auth@v0.4.0
    #   with:
    #     credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   working-directory: ./infra
    #   run: |
    #     pwd
    #     terraform init
    #     echo "final_tag=latest" >> $GITHUB_ENV
    #     export TEST="123"
    #     echo " $INIT "
    #   env:
    #     INIT: init

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   working-directory: ./infra
    #   run: |
    #     pwd
    #     terraform fmt -check
    #     echo " $TEST "
    #     echo " $INIT "

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   working-directory: ./infra
    #   run: |
    #     pwd
    #     terraform plan -lock=false
    #     echo " $GLOBAL_ENV "
    #     echo " $final_tag "

    #   # On push to main, build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   working-directory: ./infra
    #   if: github.ref == 'refs/heads/main' #&& github.event_name == 'push'
    #   run: |
    #     pwd
    #     terraform apply -auto-approve -lock=false
